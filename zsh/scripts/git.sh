#!/usr/bin/env bash

set -e

folders=(
    "eslint-config        sleep_1"
    "simple-date          sleep_1"
    "simple-prom          sleep_1"
    "request              sleep_1"
    "ip2geo               sleep_1"
    "mik-prom-exporter    sleep_3"
    "sys-prom-exporter    sleep_3"
    "vdsina-prom-exporter sleep_3"
    "iptv-mp"
    "wp-color-apk         skip_ncu"
)

RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
YELLOW=$'\033[1;33m'
BLUE=$'\033[0;34m'
PURPLE=$'\033[0;35m'
CYAN=$'\033[0;36m'
WHITE=$'\033[1;37m'
NC=$'\033[0m'

print_separator() {
    local width
    local separator
    width=$(tput cols 2>/dev/null || echo 80)
    separator=$(printf "%*s" "$width" "" | tr ' ' '-')
    printf "${BLUE}%s${NC}\n" "$separator"
}

countdown() {
    local minutes=$1
    local total_seconds=$((minutes * 60))

    for ((i=total_seconds; i>0; i--)); do
        local mins=$((i / 60))
        local secs=$((i % 60))
        printf "\r  %s‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ: %02d:%02d%s" "$YELLOW" $mins $secs "$NC"
        sleep 1
    done
    printf "\r  %s‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!%s     \n" "$GREEN" "$NC"
}

update_version() {
    local package_file="package.json"

    local current_version
    current_version=$(grep '"version":' "$package_file" | sed 's/.*"version": *"\([^"]*\)".*/\1/')

    if [ -z "$current_version" ]; then
        echo -e "  ${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–µ—Ä—Å–∏—é –≤ package.json${NC}"
        return
    fi

    echo -e "  ${BLUE}üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${WHITE}$current_version${NC}"

    IFS='.' read -r major minor patch <<< "$current_version"

    if [ "$patch" -lt 10 ]; then
        patch=$((patch + 1))
    else
        patch=0
        if [ "$minor" -lt 10 ]; then
            minor=$((minor + 1))
        else
            minor=0
            major=$((major + 1))
        fi
    fi

    local new_version="$major.$minor.$patch"
    echo -e "  ${PURPLE}üî¢ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${WHITE}$new_version${NC}"

    sed "s/\"version\": *\"[^\"]*\"/\"version\": \"$new_version\"/" "$package_file" > "$package_file.tmp" && mv "$package_file.tmp" "$package_file"

    echo -e "  ${GREEN}‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ package.json${NC}"
}

process_folder() {
    local folder_name="$1"
    local timeout="$2"
    local skip_update="$3"

    print_separator
    echo -e "${CYAN}üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞–ø–∫—É: ${WHITE}$folder_name${NC}"
    print_separator

    if [ ! -d "$folder_name" ]; then
        echo -e "${RED}‚ùå –ü–∞–ø–∫–∞ $folder_name –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é${NC}"
        return
    fi

    cd "$folder_name"

    if [ ! -d ".git" ]; then
        echo -e "${RED}‚ùå –í –ø–∞–ø–∫–µ $folder_name –Ω–µ—Ç git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞—é${NC}"
        cd ..
        return
    fi

    if [ ! -f "package.json" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –í –ø–∞–ø–∫–µ $folder_name –Ω–µ—Ç package.json, –≤—ã–ø–æ–ª–Ω—è—é —Ç–æ–ª—å–∫–æ git –æ–ø–µ—Ä–∞—Ü–∏–∏${NC}"

        echo -e "  ${BLUE}üì• git reset --hard${NC}"
        git reset --hard

        echo -e "  ${BLUE}üì• git pull${NC}"
        git pull

        echo -e "  ${GREEN}‚úÖ Git –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ${NC}"
        cd ..
        return
    fi

    echo -e "  ${BLUE}üì• git reset --hard${NC}"
    git reset --hard

    echo -e "  ${BLUE}üì• git pull${NC}"
    git pull

    echo -e "  ${BLUE}üì¶ npm i${NC}"
    npm i

    if [ "$skip_update" = "skip_ncu" ]; then
        echo -e "  ${YELLOW}‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (skip_ncu)${NC}"
        cd ..
        return
    fi

    echo -e "  ${PURPLE}üîç ncu -u${NC}"
    ncu -u

    git_status_after=$(git status --porcelain)

    if [ -z "$git_status_after" ]; then
        echo -e "  ${GREEN}‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ ncu -u, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞–ø–∫–µ${NC}"
        cd ..
        return
    fi

    echo -e "  ${CYAN}üîÑ –û–±–Ω–æ–≤–ª—è—é –≤–µ—Ä—Å–∏—é –≤ package.json${NC}"
    update_version

    echo -e "  ${YELLOW}üßπ npm cache clean${NC}"
    npm cache clean --force

    echo -e "  ${BLUE}üì¶ npm i (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)${NC}"
    npm i

    echo -e "  ${BLUE}üìù git add .${NC}"
    git add .

    echo -e "  ${BLUE}üìä git status${NC}"
    git status

    echo -e "  ${BLUE}üíæ git commit${NC}"
    git commit -m "update deps"

    echo -e "  ${BLUE}üì§ git push${NC}"
    git push

    if [ "$timeout" -gt 0 ]; then
        countdown "$timeout"
    fi

    echo -e "  ${GREEN}‚úÖ –ü–∞–ø–∫–∞ ${WHITE}$folder_name${GREEN} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ${NC}"

    cd ..
}

get_remaining_folders() {
    local priority_folders=()

    for item in "${folders[@]}"; do
        read -r folder_name _ <<< "$item"
        priority_folders+=("$folder_name")
    done

    for dir in */; do
        dir_name="${dir%/}"

        if [[ "$dir_name" == .* ]]; then
            continue
        fi

        is_priority=false
        for priority_folder in "${priority_folders[@]}"; do
            if [ "$dir_name" = "$priority_folder" ]; then
                is_priority=true
                break
            fi
        done

        if [ "$is_priority" = false ]; then
            echo "$dir_name"
        fi
    done
}

echo -e "${WHITE}üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö${NC}"
echo -e "${BLUE}üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${WHITE}$(pwd)${NC}"

echo ""
echo -e "${PURPLE}üî• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞–ø–∫–∏:${NC}"
echo ""

for item in "${folders[@]}"; do
    read -r folder_name timeout_or_flag <<< "$item"
    if [[ -n "$timeout_or_flag" ]]; then
        if [[ "$timeout_or_flag" == "skip_ncu" ]]; then
            timeout="0"
            skip_flag="skip_ncu"
        elif [[ "$timeout_or_flag" == sleep_* ]]; then
            timeout="${timeout_or_flag#sleep_}"
            skip_flag=""
        else
            timeout="$timeout_or_flag"
            skip_flag=""
        fi
    else
        timeout="0"
        skip_flag=""
    fi

    process_folder "$folder_name" "$timeout" "$skip_flag"
    echo ""
done

echo ""
echo -e "${PURPLE}üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏:${NC}"
echo ""

remaining_folders=()
while IFS= read -r folder; do
    remaining_folders+=("$folder")
done < <(get_remaining_folders)

for folder_name in "${remaining_folders[@]}"; do
    process_folder "$folder_name" "0" ""
    echo ""
done

echo -e "${GREEN}üéâ –í—Å–µ –ø–∞–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!${NC}"
